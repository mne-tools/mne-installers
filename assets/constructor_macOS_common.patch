diff -Naur constructor-orig/osx/post_extract.sh constructor-patched/osx/post_extract.sh
--- constructor-orig/osx/post_extract.sh	2022-02-09 14:17:06.000000000 +0100
+++ constructor-patched/osx/post_extract.sh	2022-03-19 20:28:13.000000000 +0100
@@ -10,7 +10,8 @@

 unset DYLD_LIBRARY_PATH

-PREFIX="$2/__NAME_LOWER__"
+# hard-code prefix, as we cannot specify it via construct.yaml
+PREFIX="$2/.mne-python"
 PREFIX=$(cd "$PREFIX"; pwd)
 export PREFIX
 echo "PREFIX=$PREFIX"
@@ -24,7 +25,7 @@

 # Extract the conda packages but avoiding the overwriting of the
 # custom metadata we have already put in place
-notify "Preparing packages..."
+logger -p 'install.info' "Preparing packages..."
 "$CONDA_EXEC" constructor --prefix "$PREFIX" --extract-conda-pkgs
 if (( $? )); then
     echo "ERROR: could not extract the conda packages"
@@ -32,7 +33,7 @@
 fi

 # Perform the conda install
-notify "Installing packages. This might take a few minutes."
+logger -p 'install.info' "Installing packages. This might take a few minutes."
 CONDA_SAFETY_CHECKS=disabled \
 CONDA_EXTRA_SAFETY_CHECKS=no \
 CONDA_CHANNELS=__CHANNELS__ \
@@ -65,9 +66,9 @@


 if [ -n '__SHORTCUTS__' ]; then
-    notify "Done! You can open __NAME__ via ~/Applications."
+    logger -p 'install.info' "Done! You can find __NAME__ in the Applications folder."
 else
-    notify "Done! Installation is available in $PREFIX."
+    logger -p 'install.info' "Done! Installation is available in $PREFIX."
 fi

 echo "installation to $PREFIX finished."
diff -Naur constructor-orig/osxpkg.py constructor-patched/osxpkg.py
--- constructor-orig/osxpkg.py	2022-02-09 14:17:06.000000000 +0100
+++ constructor-patched/osxpkg.py	2022-03-19 20:15:12.000000000 +0100
@@ -56,7 +56,7 @@
     root = tree.getroot()

     title = ET.Element('title')
-    title.text = info['name']
+    title.text = f"{info['name']} {info['version']}"
     root.append(title)

     license = ET.Element('license', file=info.get('license_file',
@@ -153,8 +153,9 @@
     # See below for an explanation of the consequences of this
     # customLocation value.
     for options in root.findall('options'):
-        options.set('customize', 'allow')
-        options.set('customLocation', '/')
+        options.set('customize', 'never')
+        options.set('customLocation', '/Applications/MNE-Python')
+        options.set('rootVolumeOnly', 'true')

     # By default, the package builder puts all of our options under
     # a single master choice. This deletes that master choice and
@@ -215,10 +218,11 @@
     # - Install on a specific disk: /<custom_root>/<name>
     # We have chosen not to do this so that this installer
     # produces the same results as a shell install.
-    domains = ET.Element('domains',
-                         enable_anywhere='true',
-                         enable_currentUserHome='true')
-    root.append(domains)
+    # domains = ET.Element('domains',
+    #                      enable_anywhere='false',
+    #                      enable_localSystem='true',
+    #                      enable_currentUserHome='false')
+    # root.append(domains)
     tree.write(xml_path)


@@ -258,6 +262,7 @@
     args = [
         "pkgbuild",
         "--root", PACKAGE_ROOT,
+        "--install-location", "/Applications/MNE-Python",
         "--identifier", "%s.pkg.%s" % (identifier, name),
         "--ownership", "preserve",

@@ -321,7 +326,8 @@
     PACKAGES_DIR = join(CACHE_DIR, "built_pkgs")

     fresh_dir(PACKAGES_DIR)
-    prefix = join(PACKAGE_ROOT, info['name'].lower())
+    # hard-code prefix, as we cannot specify it via construct.yaml
+    prefix = join(PACKAGE_ROOT, '.mne-python')


     # See http://stackoverflow.com/a/11487658/161801 for how all this works.

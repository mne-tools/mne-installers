name: Build the installers
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
    tags:
    - '*'
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-10.15, macos-11, windows-2019, windows-2022]

    runs-on: ${{ matrix.os }}

    continue-on-error: true


    steps:
      - uses: actions/checkout@v2

      # Based on https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      - name: Install the Apple code-signing certificates
        if: ${{ runner.os == 'macOS' }}
        env:
          APPLICATION_CERT_BASE64: ${{ secrets.APPLE_APPLICATION_CERT_BASE64 }}
          APPLICATION_CERT_PASSWORD: ${{ secrets.APPLE_APPLICATION_CERT_PASSWORD }}
          INSTALLER_CERT_BASE64: ${{ secrets.APPLE_INSTALLER_CERT_BASE64 }}
          INSTALLER_CERT_PASSWORD: ${{ secrets.APPLE_INSTALLER_CERT_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          APPLICATION_CERT_PATH=$RUNNER_TEMP/application_cert.p12
          INSTALLER_CERT_PATH=$RUNNER_TEMP/installer_cert.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificatefrom secrets
          echo -n "$APPLICATION_CERT_BASE64" | base64 --decode --output $APPLICATION_CERT_PATH
          echo -n "$INSTALLER_CERT_BASE64" | base64 --decode --output $INSTALLER_CERT_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificates to keychain
          security import $APPLICATION_CERT_PATH -P "$APPLICATION_CERT_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $INSTALLER_CERT_PATH -P "$INSTALLER_CERT_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Avoid a password prompt; what this actually does is not properly
          # documented; see https://github.com/fastlane/fastlane/issues/13564#issue-372273249
          # and https://stackoverflow.com/a/40039594
          # FIXME: Really needed?
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Make the keychain the default
          security default-keychain -s $KEYCHAIN_PATH

          # List available signing identities
          security find-identity -v

      - name: Install Micromamba
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: environment.yml
          micromamba-version: latest

      - name: Build installer
        shell: bash -l {0}
        run: |
          constructor recipes/mne-python_1.0

      - name: Check installer signature (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: |
          codesign --verify MNE-Python-1.0.0_0-macOS_Intel.pkg

      - name: Run installer (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: |
          echo `pwd`
          installer -pkg MNE-Python-1.0.0_0-macOS_Intel.pkg -target CurrentUserHomeDirectory

      - name: Run installer (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          echo `pwd`
          sh ./MNE-Python-1.0.0_0-Linux.sh -b

      # https://docs.anaconda.com/anaconda/install/silent-mode.html
      - name: Run installer (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: cmd  # Couldn't get PowerShell to properly perform install
        run: |
          .\MNE-Python-1.0.0_0-Windows.exe /S /InstallationType=JustMe /AddToPath=1

      - name: Check installation (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: |
          source ~/mne-python_1.0.0_0/bin/activate
          conda info
          mamba list
          mne sys_info

      - name: Check installation (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get install -y xvfb
          source ~/mne-python/1.0.0_0/bin/activate
          conda info
          mamba list
          xvfb-run mne sys_info

      - name: Check installation (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          ./gl-ci-helpers/appveyor/install_opengl.ps1

          $MneRoot = "$env:UserProfile\mne-python\1.0.0_0"
          . "$MneRoot\shell\condabin\conda-hook.ps1"
          conda activate $MneRoot
          conda info
          mamba list
          . "$MneRoot\Scripts\mne.exe" sys_info

      # - name: Archive artifacts
      #   if: ${{ matrix.os == 'ubuntu-18.04' || matrix.os == 'macOS-10.15' || matrix.os == 'windows-2016' }}
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: MNE-Python
      #     path: |
      #       MNE-Python-*.*

      - name: Release
        if: |
          github.ref_type == 'tag' &&
          (matrix.os == 'ubuntu-18.04' || matrix.os == 'macOS-10.15' || matrix.os == 'windows-2019')
        uses: ncipollo/release-action@v1
        with:
          artifacts: "MNE-Python-*.*"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          prerelease: true
          allowUpdates: true
          generateReleaseNotes: true

#   add_release_hashes:
#     if: github.ref_type == 'tag'
#     needs: build
#     runs-on: ubuntu-latest

#     steps:
#       - name: Generate hashes of release artifacts
#         uses: MCJack123/ghaction-generate-release-hashes@v1
#         with:
#           hash-type: sha256
#           file-name: hashes.txt

#       - name: Add hashes to release
#         uses: ncipollo/release-action@v1
#         with:
#           artifacts: hashes.txt
#           token: ${{ secrets.GITHUB_TOKEN }}
#           draft: true
#           prerelease: true
#           allowUpdates: true
#           generateReleaseNotes: true

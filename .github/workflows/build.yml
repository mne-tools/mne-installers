name: Build the installers
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
    tags:
    - '*'
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-10.15, macos-11, windows-2019, windows-2022]

    runs-on: ${{ matrix.os }}

    continue-on-error: true


    steps:
      # Based on https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      - name: Install code-signing certificates (macOS)
        if: ${{ runner.os == 'macOS' && github.event_name != 'pull_request' }}
        env:
          APPLICATION_CERT_BASE64: ${{ secrets.APPLE_APPLICATION_CERT_BASE64 }}
          APPLICATION_CERT_PASSWORD: ${{ secrets.APPLE_APPLICATION_CERT_PASSWORD }}
          INSTALLER_CERT_BASE64: ${{ secrets.APPLE_INSTALLER_CERT_BASE64 }}
          INSTALLER_CERT_PASSWORD: ${{ secrets.APPLE_INSTALLER_CERT_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          APPLICATION_CERT_PATH=$RUNNER_TEMP/application_cert.p12
          INSTALLER_CERT_PATH=$RUNNER_TEMP/installer_cert.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificatefrom secrets
          echo -n "$APPLICATION_CERT_BASE64" | base64 --decode --output $APPLICATION_CERT_PATH
          echo -n "$INSTALLER_CERT_BASE64" | base64 --decode --output $INSTALLER_CERT_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # download Apple certificates
          curl https://www.apple.com/appleca/AppleIncRootCertificate.cer -L --output AppleIncRootCertificate.cer
          curl https://www.apple.com/certificateauthority/AppleComputerRootCertificate.cer -L --output AppleComputerRootCertificate.cer
          curl http://developer.apple.com/certificationauthority/AppleWWDRCA.cer -L --output AppleWWDRCA.cer

          # install Apple certificates
          # the following line is required for macOS 11+, see
          # https://developer.apple.com/forums/thread/671582?answerId=693632022#693632022
          sudo security authorizationdb write com.apple.trust-settings.admin allow
          sudo security add-trusted-cert -d -r trustRoot -k $KEYCHAIN_PATH ./AppleIncRootCertificate.cer
          sudo security add-trusted-cert -d -r trustRoot -k $KEYCHAIN_PATH ./AppleComputerRootCertificate.cer
          security add-certificates -k $KEYCHAIN_PATH ./AppleWWDRCA.cer

          # ensure we're going to import the correct developer certificates into keychain
          openssl pkcs12 -nokeys -passin pass:"$APPLICATION_CERT_PASSWORD" -in $APPLICATION_CERT_PATH | grep friendlyName
          openssl pkcs12 -nokeys -passin pass:"$INSTALLER_CERT_PASSWORD" -in $INSTALLER_CERT_PATH | grep friendlyName

          # import developer certificates
          security import $APPLICATION_CERT_PATH -P "$APPLICATION_CERT_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $INSTALLER_CERT_PATH -P "$INSTALLER_CERT_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH

          # ensure the imported certificates are valid
          security find-identity -v $KEYCHAIN_PATH

          # Avoid a password prompt; what this actually does is not properly
          # documented; see https://github.com/fastlane/fastlane/issues/13564#issue-372273249
          # and https://stackoverflow.com/a/40039594
          # FIXME: Really needed?
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Make the keychain the default
          security default-keychain -s $KEYCHAIN_PATH

          # List available signing identities (for debugging purposes)
          security find-identity

      - uses: actions/checkout@v2

      - name: Install Micromamba
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: environment.yml
          micromamba-version: latest

      - name: Patch constructor (macOS)
        if: ${{ runner.os == 'macOS' }}
        shell: bash -l {0}
        run: |
          patch $CONDA_PREFIX/lib/python3.9/site-packages/constructor/osxpkg.py ./assets/constructor_macOS.patch

      - name: Patch config (macOS pull request)
        if: ${{ runner.os == 'macOS' && github.event_name == 'pull_request' }}
        shell: bash -l {0}
        run: |
          sed -i "" "s/9779L28NP8//" recipes/mne-python_1.0/construct.yaml

      - name: Build installer
        shell: bash -l {0}
        # As of 2022/03/14, ~7 min on 20.04 (fastest) and ~11 min on windows-2019 (slowest).
        # So let's set this to a reasonable limit that will tell us more quickly
        # if something has gone wrong with dependency resolution.
        timeout-minutes: 20
        run: |
          PYTHONUTF8=1 constructor recipes/mne-python_1.0  # enforce UTF-8 encoding when reading files even on Windows

      - name: Check installer signature (macOS)
        if: ${{ runner.os == 'macOS' && github.event_name != 'pull_request' }}
        run: |
          # Installer package
          pkgutil --check-signature MNE-Python-1.0.0_0-macOS_Intel.pkg
          # Now extract the package and check that the _conde.exe binary is
          # properly signed as well
          pkgutil --expand-full MNE-Python-1.0.0_0-macOS_Intel.pkg ./mne-extracted
          codesign -vd ./mne-extracted/main.pkg/Payload/mne-python_1.0.0_0/_conda.exe
          # Check entitlements of _conda.exe binary
          codesign --display --entitlements - ./mne-extracted/main.pkg/Payload/mne-python_1.0.0_0/_conda.exe
          rm -rf ./mne-extracted

      - name: Notarize installer (macOS)
        if: ${{ matrix.os == 'macOS-11' && github.event_name != 'pull_request' }}
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Notarize the installer
          xcrun notarytool submit ./MNE-Python-1.0.0_0-macOS_Intel.pkg \
              --wait \
              --apple-id=$APPLE_ID \
              --password=$APPLE_ID_PASSWORD \
              --team-id=$APPLE_TEAM_ID
          # Staple the notarization certificate onto it
          xcrun stapler staple MNE-Python-1.0.0_0-macOS_Intel.pkg

      - name: Calculate SHA256 hash of installer package (macOS & Linux)
        if: ${{ runner.os == 'macOS' || runner.os == 'Linux'}}
        run: |
          shopt -s nullglob  # Fail if the following pattern yields no results
          matches=(MNE-Python-*-*.*)
          installer_fname="${matches[0]}"
          hash_fname="${installer_fname}.sha256.txt"
          shasum -a 256 "$installer_fname" > "$hash_fname"
          cat "$hash_fname"

      - name: Calculate SHA256 hash of installer package (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          Get-FileHash MNE-Python-1.0.0_0-Windows.exe -Algorithm SHA256 > MNE-Python-1.0.0_0-Windows.exe.sha256.txt
          Get-Content MNE-Python-1.0.0_0-Windows.exe.sha256.txt

      - name: Run installer (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: |
          echo `pwd`
          installer -verbose -pkginfo -pkg ./MNE-Python-1.0.0_0-macOS_Intel.pkg
          installer -verbose -dominfo -pkg ./MNE-Python-1.0.0_0-macOS_Intel.pkg
          installer -verbose -volinfo -pkg ./MNE-Python-1.0.0_0-macOS_Intel.pkg
          sudo installer \
            -verbose \
            -pkg MNE-Python-1.0.0_0-macOS_Intel.pkg \
            -target / \
            || ( tail -n 30 /var/log/install.log  && exit 1 ) # display last log messages on error

      - name: Run installer (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          echo `pwd`
          sh ./MNE-Python-1.0.0_0-Linux.sh -b

      # https://docs.anaconda.com/anaconda/install/silent-mode.html
      - name: Run installer (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: cmd  # Couldn't get PowerShell to properly perform install
        run: |
          .\MNE-Python-1.0.0_0-Windows.exe /S /InstallationType=JustMe /AddToPath=1

      - name: Check installation (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: |
          source /Applications/MNE-Python/mne-python_1.0.0_0/bin/activate
          conda info
          mamba list

          # Test that file permissions are set correctly (owned by "runner",
          # not "root".)
          # https://unix.stackexchange.com/a/7733
          [ `ls -ld /Applications/MNE-Python/mne-python_1.0.0_0 | awk 'NR==1 {print $3}'` == "runner" ] || exit 1

          # Check that the installed Python is, in fact, an Intel binary
          python -c "import platform; assert platform.machine() == 'x86_64'"

          # Check the deployed environment variables were set correctly upon
          # environment activation
          mamba env config vars list
          python -c "import os; assert 'CONDA_SUBDIR' in os.environ; assert os.environ['CONDA_SUBDIR'] == 'osx-64'"
          python -c "import os; assert 'PYTHONNOUSERSITE' in os.environ; assert os.environ['PYTHONNOUSERSITE'] == '1'"

          # Check we have all .app bundles in /Applications/MNE-Python
          test `ls -d /Applications/MNE-Python/*.app | wc -l` -eq 5

          # Test that the custom icon was set on the MNE folder in /Applications/MNE-Python
          test -f /Applications/MNE-Python/Icon$'\r'

          # Run MNE's sys_info
          mne sys_info

          # Try to import MNE and all additional packages included in the
          # installer
          python assets/test_imports.py

      - name: Check installation (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get install -y xvfb
          source ~/mne-python/1.0.0_0/bin/activate
          conda info
          mamba list

          # Check the deployed environment variables were set correctly upon
          # environment activation
          mamba env config vars list
          python -c "import os; assert 'PYTHONNOUSERSITE' in os.environ; assert os.environ['PYTHONNOUSERSITE'] == '1'"

          # Check that menu shortcuts were created …
          pushd ~/.local/share/applications
          ls -l
          echo "Checking for existence of .desktop files"
          test `ls MNE-Python*.desktop | wc -l` -eq 5
          # … and patched to work around a bug in menuinst
          echo "Checking that incorrect Terminal entries have been removed"
          test `grep "Terminal=True"  MNE-Python*.desktop | wc -l` -eq 0
          test `grep "Terminal=False" MNE-Python*.desktop | wc -l` -eq 0
          echo "Checking that Terminal entries are correct…"
          test `grep "Terminal=true"  MNE-Python*.desktop | wc -l` -ge 1
          test `grep "Terminal=false" MNE-Python*.desktop | wc -l` -ge 1

          # Display their contents
          for f in MNE-Python*.desktop; do echo "📂 $f:"; cat "$f"; echo; done
          popd

          # Run MNE's sys_info
          xvfb-run mne sys_info

          # Try to import MNE and all additional packages included in the
          # installer
          python assets/test_imports.py

      - name: Check installation (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          ./gl-ci-helpers/appveyor/install_opengl.ps1

          $MneRoot = "$env:UserProfile\mne-python\1.0.0_0"
          . "$MneRoot\shell\condabin\conda-hook.ps1"
          conda activate $MneRoot
          conda info
          mamba list
          mamba env config vars list
          python -c "import os; assert 'PYTHONNOUSERSITE' in os.environ; assert os.environ['PYTHONNOUSERSITE'] == '1'"
          . "$MneRoot\Scripts\mne.exe" sys_info
          python assets\test_imports.py


      # - name: Archive artifacts
      #   if: ${{ matrix.os == 'ubuntu-18.04' || matrix.os == 'macOS-10.15' || matrix.os == 'windows-2016' }}
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: MNE-Python
      #     path: |
      #       MNE-Python-*.*

      - name: Export frozen environment definition (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: |
          source /Applications/MNE-Python/mne-python_1.0.0_0/bin/activate
          mamba list --json > MNE-Python-1.0.0_0-macOS_Intel.env.json
          cat MNE-Python-1.0.0_0-macOS_Intel.env.json

      - name: Export frozen environment definition (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          source ~/mne-python/1.0.0_0/bin/activate
          mamba list --json > MNE-Python-1.0.0_0-Linux.env.json
          cat MNE-Python-1.0.0_0-Linux.env.json

      - name: Export frozen environment definition (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          $MneRoot = "$env:UserProfile\mne-python\1.0.0_0"
          . "$MneRoot\shell\condabin\conda-hook.ps1"
          conda activate $MneRoot
          mamba list --json > MNE-Python-1.0.0_0-Windows.env.json
          Get-Content MNE-Python-1.0.0_0-Windows.env.json

      - name: Release
        if: |
          github.ref_type == 'tag' &&
          (matrix.os == 'ubuntu-18.04' || matrix.os == 'macOS-11' || matrix.os == 'windows-2019')
        uses: ncipollo/release-action@v1
        with:
          artifacts: "MNE-Python-*.*"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          prerelease: true
          allowUpdates: true
          generateReleaseNotes: true

#   add_release_hashes:
#     if: github.ref_type == 'tag'
#     needs: build
#     runs-on: ubuntu-latest

#     steps:
#       - name: Generate hashes of release artifacts
#         uses: MCJack123/ghaction-generate-release-hashes@v1
#         with:
#           hash-type: sha256
#           file-name: hashes.txt

#       - name: Add hashes to release
#         uses: ncipollo/release-action@v1
#         with:
#           artifacts: hashes.txt
#           token: ${{ secrets.GITHUB_TOKEN }}
#           draft: true
#           prerelease: true
#           allowUpdates: true
#           generateReleaseNotes: true
